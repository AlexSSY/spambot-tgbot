import os
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
from telethon.errors import SessionPasswordNeededError, PhoneNumberInvalidError

load_dotenv()

# Bot and Telegram API credentials
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
SESSIONS_DIR = "sessions"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
messages_to_send = {}


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")


async def broadcast_to_groups(image_path: str, caption: str):
    for session_file in os.listdir(SESSIONS_DIR):
        try:
            print(f"–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏: {session_file}")
            session_path = os.path.join(SESSIONS_DIR, session_file)
            session_string = ""
            with open(session_path, "r") as f:
                session_string = f.read()
            client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
            await client.start()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            dialogs = await client(GetDialogsRequest(
                offset_date=None,
                offset_id=0,
                offset_peer=InputPeerEmpty(),
                limit=100,
                hash=0
            ))

            for chat in dialogs.chats:
                if getattr(chat, "megagroup", False):  # —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                    try:
                        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {chat.title}")
                        await client.send_file(chat.id, image_path, caption=caption)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {chat.title}: {e}")

            await client.disconnect()

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é {session_file}: {e}")

        finally:
            await client.disconnect()


async def is_session_valid(session_path):
    try:
        session_string = ""
        with open(session_path, "r") as f:
            session_string = f.read()
        client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
        await client.connect()
        if await client.is_user_authorized():
            await client.disconnect()
            return True
        await client.disconnect()
    except Exception as e:
        pass
    return False


@dp.message_handler(commands=['sessions'])
async def list_sessions(message: types.Message):
    valid_sessions = []
    for session in os.listdir(SESSIONS_DIR):
        session_path = os.path.join(SESSIONS_DIR, session)
        if await is_session_valid(session_path):
            valid_sessions.append(session)
    if valid_sessions:
        await message.answer("‚úÖ Valid sessions:\n" + "\n".join(valid_sessions))
    else:
        await message.answer("‚ùå No valid sessions found.")


@dp.message_handler(commands=['cleanup_sessions'])
async def cleanup_sessions(message: types.Message):
    removed = []
    for session in os.listdir(SESSIONS_DIR):
        session_path = os.path.join(SESSIONS_DIR, session)
        if not await is_session_valid(session_path):
            try:
                os.remove(session_path)
                removed.append(session)
            except Exception:
                pass
    if removed:
        await message.answer("üóë Removed invalid sessions:\n" + "\n".join(removed))
    else:
        await message.answer("üëç All sessions are valid.")


class AddSessionStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()


@dp.message_handler(commands=['add_session'])
async def add_session_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +1234567890):")
    await AddSessionStates.waiting_for_phone.set()


@dp.message_handler(state=AddSessionStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)

    try:
        client = TelegramClient(StringSession(), API_ID, API_HASH)
        await client.connect()

        phone_code_hash = (await client.send_code_request(phone)).phone_code_hash
        await state.update_data(client=client.session.save(), phone_code_hash=phone_code_hash)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º session string
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
        await AddSessionStates.waiting_for_code.set()
    except PhoneNumberInvalidError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message_handler(state=AddSessionStates.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    phone = data["phone"]
    session_str = data["client"]
    phone_code_hash = data["phone_code_hash"]

    client = TelegramClient(StringSession(session_str), API_ID, API_HASH)
    await client.connect()

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
    except SessionPasswordNeededError:
        await state.update_data(client=client.session.save())
        await message.answer("–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await AddSessionStates.waiting_for_password.set()
        return
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await state.finish()
        return

    await save_session_and_finish(client, phone, message, state)


@dp.message_handler(state=AddSessionStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    phone = data["phone"]
    session_str = data["client"]

    client = TelegramClient(StringSession(session_str), API_ID, API_HASH)
    await client.connect()

    try:
        await client.sign_in(password=password)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}")
        await state.finish()
        return

    await save_session_and_finish(client, phone, message, state)


async def save_session_and_finish(client: TelegramClient, phone: str, message: types.Message, state: FSMContext):
    session_str = client.session.save()
    phone_safe = phone.replace("+", "").replace(" ", "")
    with open(f"{SESSIONS_DIR}/{phone_safe}.session", "w") as f:
        f.write(session_str)

    await client.disconnect()
    await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {phone}")
    await state.finish()


@dp.message_handler(content_types=['photo', 'text'])
async def message_handler(message: types.Message):
    if not message.photo:
        return await message.answer("–ù—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞. –ü—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é.")

    caption = message.caption or ""
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await bot.download_file(file_path, "image_to_send.jpg")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    messages_to_send[message.from_user.id] = caption

    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    # –†–∞—Å—Å—ã–ª–∫–∞
    await broadcast_to_groups("image_to_send.jpg", caption)

    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
